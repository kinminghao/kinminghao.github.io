<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>既然来了就坐坐吧</title>
  
  <link href="//atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-05-17T14:11:22.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>kin</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>LocalDateTime 简述</title>
    <link href="http://yoursite.com/2017/05/16/LocalDateTime-%E7%AE%80%E8%BF%B0/"/>
    <id>http://yoursite.com/2017/05/16/LocalDateTime-简述/</id>
    <published>2017-05-16T09:21:56.000Z</published>
    <updated>2017-05-17T14:11:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>Java 8 更新的部分内容中,有一部分代替了以往比较难用的 java.util.Date 类,并且创建了一套新的时间类型,该类型为: java.time.LocalDateTime.<br><code>LocalDateTime</code> 提供了许多方法供我们使用,</p>
<h1 id="基本类型"><a href="#基本类型" class="headerlink" title="基本类型"></a>基本类型</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">java.time.LocalDate</div><div class="line">java.time.LocalTime</div><div class="line">java.time.LocalDateTime</div><div class="line">java.time.ZoneId</div><div class="line">java.time.format.DateTimeFormatter</div></pre></td></tr></table></figure>
<p>java.time 包中提供的工具方法和类非常之多,但是我们在使用的时候基本上很难用到这里面所有的方法,很多时候我们甚至只了解其中的三分之一.<br><a id="more"></a><br>这些包中, <code>LocalDate</code> 表示日期, <code>LocalTime</code> 表示时间, <code>LocalDateTime</code> 表示日期和时间的组合.<br><code>ZoneId</code> 表示时区,一般情况下可以使用 <code>ZoneId.systemDefault()</code> 获取当前系统默认的时区.当然,存在系统时区不正常的情况下我们可以使用 <code>ZoneId.of(&quot;Asia/Shanghai&quot;)</code> 的方法来避免.<br><code>DateTimeFormatte</code> 包含了许多<code>DateTimeFormatte</code>类型的静态变量,它支持各种类型的日期和字符串之间的转换,具体的情况我们可以通过注释来查看.</p>
<h1 id="基本方法"><a href="#基本方法" class="headerlink" title="基本方法"></a>基本方法</h1><p>我们对于时间最常用的方法是获取时间,时间和字符串的转换,以及计算时间.<br>时间对象已经自带了很多的比较,计算的方法,相当显而易见,所以在这里不加赘述,大家可以直接进行调用.</p>
<h2 id="获取时间"><a href="#获取时间" class="headerlink" title="获取时间"></a>获取时间</h2><p><code>LocalDate</code> <code>LocalTime</code> <code>LocalDateTime</code> 三个工具分别表示对应的时间,他们都有一些类似的方法,比如:</p>
<ul>
<li><code>now</code> 方法都会获取到当前的时间.都有 <code>MIN</code>,<code>MAX</code> 属性,表示最大和最小的时间. </li>
<li><p><code>of</code> 方法会要求传入对应的 年月日时分秒 的信息,来返回对应的时间.<br>还有一些比较有趣的方法比如:<br><code>LocalDate</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> LocalDate <span class="title">ofYearDay</span><span class="params">(<span class="keyword">int</span> year, <span class="keyword">int</span> dayOfYear)</span></span>;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> LocalDate <span class="title">ofEpochDay</span><span class="params">(<span class="keyword">long</span> epochDay)</span></span>;</div></pre></td></tr></table></figure>
</li>
<li><p><code>ofYearDay</code> 表示某一年的第几天,它会计算好对应的天数并且返回对应的日期.</p>
</li>
<li><code>ofEpochDay</code> 表示从 <strong><em>1970-01-01</em></strong> 开始计算之后的第几天的日期.</li>
</ul>
<p><code>LocalTime</code><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> LocalTime <span class="title">ofSecondOfDay</span><span class="params">(<span class="keyword">long</span> secondOfDay)</span></span>;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> LocalTime <span class="title">ofNanoOfDay</span><span class="params">(<span class="keyword">long</span> nanoOfDay)</span></span>;</div></pre></td></tr></table></figure></p>
<ul>
<li><code>ofSecondOfDay</code> 表示从一天开始的以秒计时的时间.</li>
<li><code>ofNanoOfDay</code> 表示从一天的开始的以纳秒计时的时间.</li>
</ul>
<p>当然, <code>LocalDateTime</code> 也有一个名为 <code>ofEpochSecond</code> 的方法可以返回从  <strong><em>1970-01-01 00:00:00</em></strong> 开始计时的以秒计时的具体的时间日期,但是我目前没想到有什么用处.</p>
<h3 id="完整时间"><a href="#完整时间" class="headerlink" title="完整时间"></a>完整时间</h3><p>我们可以通过一些简单的方法获取对应的时间.<br>比如:<br><code>LocalDate</code> 有一个最简单的 <code>atTime</code> 方法可以传入对应的 <code>LocalTime</code> 对象获取完整的时间. 或者可以选择 <code>atStartOfDay</code> 方法来获取这一天的开始时间.</p>
<p><code>LocalTime</code> 同样也可以使用 <code>atDate</code> 方法来获取完整时间.</p>
<p>或者我们可以调用 <code>LocalDateTime</code> 方法的 <code>of</code> 方法来传入 <code>LocalDate</code> 和 <code>LocalTime</code> 对象来获得对应的时间.</p>
<h1 id="字符串转换"><a href="#字符串转换" class="headerlink" title="字符串转换"></a>字符串转换</h1><h2 id="字符串-gt-时间"><a href="#字符串-gt-时间" class="headerlink" title="字符串 -&gt; 时间"></a>字符串 -&gt; 时间</h2><p>parse 可以将字符串转换为对应的时间类型.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">LocalDate date = LocalDate.parse(<span class="string">"2017-02-12"</span>);</div><div class="line">LocalTime time = LocalTime.parse(<span class="string">"12:23:52"</span>);</div></pre></td></tr></table></figure>
<p>除了这个我们还可以同时传入对应的 Formatter, 这个我们会在本文末尾提及.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">LocalDate date = LocalDate.parse(<span class="string">"19870412"</span>, DateTimeFormatter.BASIC_ISO_DATE);</div></pre></td></tr></table></figure>
<h2 id="时间-gt-字符串"><a href="#时间-gt-字符串" class="headerlink" title="时间 -&gt; 字符串"></a>时间 -&gt; 字符串</h2><p>format 方法可以将时间转换成字符串.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">ZonedDateTime dateTime = ZonedDateTime.now();</div><div class="line">DateTimeFormatter formatter = DateTimeFormatter.RFC_1123_DATE_TIME;</div><div class="line">dateTime.format(formatter);</div><div class="line">formatter.format(dateTime);</div></pre></td></tr></table></figure>
<p>我们需要对应的时间对象以及格式化对象,之后我们可以对任何一个对象进行 <code>format</code> 格式化.</p>
<h1 id="DateTimeFormatter"><a href="#DateTimeFormatter" class="headerlink" title="DateTimeFormatter"></a>DateTimeFormatter</h1><p>这里我们只描述有关 <code>DateTimeFormatter</code> 的静态属性:</p>
<ul>
<li><code>ISO_LOCAL_DATE</code> 日期: 例子: 2011-12-03</li>
<li><code>ISO_OFFSET_DATE</code> 日期: 例子: 2011-12-03+01:00</li>
<li><code>ISO_DATE</code> 日期: 例子: 2011-12-03 或者 2011-12-03+01:00</li>
<li><code>ISO_LOCAL_TIME</code> 时间: 例子: 10:15 或者 10:15:30</li>
<li><code>ISO_OFFSET_TIME</code> 带时区时间: 例子: 10:15+01:00 或者 10:15:30+01:00’</li>
<li><code>ISO_TIME</code> 时间: 例子: 10:15 或者 10:15:30 或者 10:15:30+01:00</li>
<li><code>ISO_LOCAL_DATE_TIME</code> 完整时间: 例子: 2011-12-03T10:15:30</li>
<li><code>ISO_OFFSET_DATE_TIME</code> 带时区完整时间: 例子: 2011-12-03T10:15:30+01:00</li>
<li><code>ISO_ZONED_DATE_TIME</code> 带时区带地区完整时间: 例子: 2011-12-03T10:15:30+01:00[Europe/Paris]</li>
<li><code>ISO_DATE_TIME</code> 完整时间: 例子: 2011-12-03T10:15:30 或者 2011-12-03T10:15:30+01:00 或者2011-12-03T10:15:30+01:00[Europe/Paris]</li>
<li><code>ISO_ORDINAL_DATE</code> 天数的日期: 例子: 2012-337 </li>
<li><code>ISO_WEEK_DATE</code> 按周的日期: 例子: 2012-W48-6</li>
<li><code>ISO_INSTANT</code> 完整时间: 例子: 2011-12-03T10:15:30Z</li>
<li><code>BASIC_ISO_DATE</code> 日期: 例子: 20111203</li>
<li><code>RFC_1123_DATE_TIME</code> 完整时间 例子: Tue, 3 Jun 2008 11:05:30 GMT</li>
</ul>
<p><strong><em>转换时间的时候如果是带有时区的 formatter 我们需要使用 ZoneDateTime.</em></strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Java 8 更新的部分内容中,有一部分代替了以往比较难用的 java.util.Date 类,并且创建了一套新的时间类型,该类型为: java.time.LocalDateTime.&lt;br&gt;&lt;code&gt;LocalDateTime&lt;/code&gt; 提供了许多方法供我们使用,&lt;/p&gt;
&lt;h1 id=&quot;基本类型&quot;&gt;&lt;a href=&quot;#基本类型&quot; class=&quot;headerlink&quot; title=&quot;基本类型&quot;&gt;&lt;/a&gt;基本类型&lt;/h1&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;java.time.LocalDate&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;java.time.LocalTime&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;java.time.LocalDateTime&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;java.time.ZoneId&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;java.time.format.DateTimeFormatter&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;java.time 包中提供的工具方法和类非常之多,但是我们在使用的时候基本上很难用到这里面所有的方法,很多时候我们甚至只了解其中的三分之一.&lt;br&gt;
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="Date" scheme="http://yoursite.com/tags/Date/"/>
    
  </entry>
  
  <entry>
    <title>LinkedList解析</title>
    <link href="http://yoursite.com/2017/05/13/LinkedList%E8%A7%A3%E6%9E%90/"/>
    <id>http://yoursite.com/2017/05/13/LinkedList解析/</id>
    <published>2017-05-13T02:35:37.000Z</published>
    <updated>2017-05-13T06:51:25.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天我们说一下 <code>LinkedList</code> ,在列表的使用中,我们很多时候会纠结于列表的选择,是选择数组实现的 <code>ArrayList</code> 还是选择链表实现的 <code>LinkedList</code>.</p>
<h1 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h1><p>列表的基本属性有三个,和 <code>ArrayList</code> 类似,第一个属性是:<br><a id="more"></a></p>
<h2 id="列表大小"><a href="#列表大小" class="headerlink" title="列表大小"></a>列表大小</h2><p>用来表示列表存储的元素个数,<br>链表的扩容非常自由,所以它的初始化容量是0<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">transient</span> <span class="keyword">int</span> size = <span class="number">0</span>;</div></pre></td></tr></table></figure></p>
<h2 id="两个数据元素"><a href="#两个数据元素" class="headerlink" title="两个数据元素"></a>两个数据元素</h2><p><code>LinkedList</code> 是一个双向链表,所以它有两个重要元素,就是<strong><em>头</em></strong>和<strong><em>尾</em></strong>.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">transient</span> Node&lt;E&gt; first;</div><div class="line"><span class="keyword">transient</span> Node&lt;E&gt; last;</div></pre></td></tr></table></figure></p>
<p> 其中我们有一个 <code>Node</code> 对象.<br> 这是一个很常见的对象,它有着元素内容,前后的元素的引用.<br> <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">E</span>&gt; </span>&#123;</div><div class="line">    E item;</div><div class="line">    Node&lt;E&gt; next;</div><div class="line">    Node&lt;E&gt; prev;</div><div class="line"></div><div class="line">    Node(Node&lt;E&gt; prev, E element, Node&lt;E&gt; next) &#123;</div><div class="line">        <span class="keyword">this</span>.item = element;</div><div class="line">        <span class="keyword">this</span>.next = next;</div><div class="line">        <span class="keyword">this</span>.prev = prev;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="调整链表"><a href="#调整链表" class="headerlink" title="调整链表"></a>调整链表</h1><p><code>LinkedList</code> 提供几个内部的调整方法,比如:在最前面新增,在最后新增,在某个元素前面新增,移除最前面的,移除最后面的,移除某个元素.<br>这些操作基本上是对于链表中点的引用的调整,来实现这些个方法的.具体的不详细赘述.</p>
<h1 id="返回某个元素"><a href="#返回某个元素" class="headerlink" title="返回某个元素"></a>返回某个元素</h1><p>我们都知道列表相对于数组最方便的地方在于新增元素,因为我们只需要将点连接到后面就可以了.而不需要考虑在新增一个元素的时候去检查数组长度.</p>
<p>但是相对于这一点来说,链表也有不方便的一点,就是去获取某个特定的元素:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function">Node&lt;E&gt; <span class="title">node</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (index &lt; (size &gt;&gt; <span class="number">1</span>)) &#123;</div><div class="line">        Node&lt;E&gt; x = first;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; index; i++)</div><div class="line">            x = x.next;</div><div class="line">        <span class="keyword">return</span> x;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        Node&lt;E&gt; x = last;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = size - <span class="number">1</span>; i &gt; index; i--)</div><div class="line">            x = x.prev;</div><div class="line">        <span class="keyword">return</span> x;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在 这里我们看到了,当我们需要获取第 n 个元素的时候,链表需要先检查我们的第 n 个元素是举例头和尾哪个点更近一些,之后再从头或尾开始计算,一个一个去遍历,直到到达我们所需要的点为止.<br>所以这个操作要消耗很多的行为,所以当数据量很大的时候,这种寻找一个点的方式就会变得很慢.<br>当然,这种慢是仅限于在取出的点距离头尾相对较远的情况,如果取出的点是距离头尾很近的情况下,这种速度的影响其实微乎其微.</p>
<hr>
<h1 id="ArrayList-和-LinkedList-的差异"><a href="#ArrayList-和-LinkedList-的差异" class="headerlink" title="ArrayList 和 LinkedList 的差异"></a><code>ArrayList</code> 和 <code>LinkedList</code> 的差异</h1><p>所以我们根据上面可以得到结论:</p>
<blockquote>
<ul>
<li>当对于数据列表只是单纯的存储的情况下, <code>LinkedList</code> 的效率要更高一些,因为它避免了在新增一个元素的时候为了考虑扩容的情况所消耗的成本.</li>
<li>当对于数据列表需要频繁取值的情况下, <code>ArrayList</code> 的效率要更高一点,因为数组在查询某个元素的情况下是可以直接定位到对应的元素位置.</li>
</ul>
</blockquote>
<p>所以我们可以看出,在使用列表的时候,列表的选择其实对于我们的运行效率产生了相当的影响.</p>
<hr>
<p>关于 <code>LinkedList</code> 我们就研究到这里,之后我们有机会会继续研究其它的集合类.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天我们说一下 &lt;code&gt;LinkedList&lt;/code&gt; ,在列表的使用中,我们很多时候会纠结于列表的选择,是选择数组实现的 &lt;code&gt;ArrayList&lt;/code&gt; 还是选择链表实现的 &lt;code&gt;LinkedList&lt;/code&gt;.&lt;/p&gt;
&lt;h1 id=&quot;属性&quot;&gt;&lt;a href=&quot;#属性&quot; class=&quot;headerlink&quot; title=&quot;属性&quot;&gt;&lt;/a&gt;属性&lt;/h1&gt;&lt;p&gt;列表的基本属性有三个,和 &lt;code&gt;ArrayList&lt;/code&gt; 类似,第一个属性是:&lt;br&gt;
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="ArrayList" scheme="http://yoursite.com/tags/ArrayList/"/>
    
  </entry>
  
  <entry>
    <title>ArrayList解析</title>
    <link href="http://yoursite.com/2017/05/06/ArrayList%E8%A7%A3%E6%9E%90/"/>
    <id>http://yoursite.com/2017/05/06/ArrayList解析/</id>
    <published>2017-05-06T03:00:42.000Z</published>
    <updated>2017-05-08T14:17:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天回头研究一下 java 中的列表 <code>ArrayList</code> ,它表示用数组来存储一系列的对象,并且支持 <code>List</code> 的特性.</p>
<p>我们今天研究一下它的基础<strong><em>属性</em></strong>, <strong><em>添加方法</em></strong>, 以及与 lambda 相关的部分.</p>
<h1 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h1><h2 id="默认容量"><a href="#默认容量" class="headerlink" title="默认容量"></a>默认容量</h2><p>表示新建一个 <code>ArrayList</code> 的初始化空间.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_CAPACITY = <span class="number">10</span>;</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<h2 id="空列表"><a href="#空列表" class="headerlink" title="空列表"></a>空列表</h2><p>提供两个空的数组列表,供代码中使用以便于给参数赋值.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object[] EMPTY_ELEMENTDATA = &#123;&#125;;</div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = &#123;&#125;;</div></pre></td></tr></table></figure></p>
<h2 id="存储数组"><a href="#存储数组" class="headerlink" title="存储数组"></a>存储数组</h2><p>在数组泛型中存储的数据,用数组来实现.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">transient</span> Object[] elementData; <span class="comment">// non-private to simplify nested class access</span></div></pre></td></tr></table></figure></p>
<h2 id="列表大小"><a href="#列表大小" class="headerlink" title="列表大小"></a>列表大小</h2><p><code>size</code> 表示列表所包含的元素个数,默认是0<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">int</span> size;</div></pre></td></tr></table></figure></p>
<hr>
<h1 id="扩容"><a href="#扩容" class="headerlink" title="扩容"></a>扩容</h1><p>其实如果提到了 <code>ArrayList</code> 我们很多时候都会最先提到 <code>ArrayList</code> 的扩容方法,那么我们这边就先研究一下有关扩容方法的一串方法链</p>
<p><code>ArrayList</code> 有一个名为 <code>grow</code> 的匿名方法,顾名思义,就是扩容,让我们来一起看一下(<strong>核心</strong>):</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">grow</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</div><div class="line">    <span class="comment">//我们取到了原有的容量</span></div><div class="line">    <span class="keyword">int</span> oldCapacity = elementData.length;</div><div class="line">    <span class="comment">//新的容量暂时等于原有的容量的 大约 一点五 倍</span></div><div class="line">    <span class="keyword">int</span> newCapacity = oldCapacity + (oldCapacity &gt;&gt; <span class="number">1</span>);</div><div class="line"></div><div class="line">    <span class="comment">//取 新容量 和 传入的最小容量 中的较小者(为了更小的内存占用)</span></div><div class="line">    <span class="keyword">if</span> (newCapacity - minCapacity &lt; <span class="number">0</span>)</div><div class="line">        newCapacity = minCapacity;</div><div class="line"></div><div class="line">    <span class="comment">//MAX_ARRAY_SIZE的值是最大的 Integer - 8 (2147483639)</span></div><div class="line">    <span class="keyword">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class="number">0</span>)</div><div class="line">        <span class="comment">/*</span></div><div class="line">        综合起来我们可以知道 minCapacity 是大于 2147483639 的</div><div class="line">        下面方法会返回一个 合适 的较大数</div><div class="line">        */</div><div class="line">        newCapacity = hugeCapacity(minCapacity);</div><div class="line"></div><div class="line">    <span class="comment">//方法获取了一个新的数组,长度为新的长度,前面的元素不变, 延长的部分使用默认值</span></div><div class="line">    elementData = Arrays.copyOf(elementData, newCapacity);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在这其中我们调用了 <code>hugeCapacity</code> 方法:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">hugeCapacity</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">//负数抛出内存溢出异常</span></div><div class="line">    <span class="keyword">if</span> (minCapacity &lt; <span class="number">0</span>) <span class="comment">// overflow</span></div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> OutOfMemoryError();</div><div class="line"></div><div class="line">    <span class="comment">//返回 MAX_VALUE 或者 MAX_VALUE-8</span></div><div class="line">    <span class="keyword">return</span> (minCapacity &gt; MAX_ARRAY_SIZE) ?</div><div class="line">        Integer.MAX_VALUE :</div><div class="line">        MAX_ARRAY_SIZE;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>所以我们得出了,在列表长度没有变的<strong>特别巨大</strong>的情况下,新的数组长度<strong><em>一般情况下会变成原有长度的1.5倍</em></strong></p>
<p>所以当我们在调用 <code>add</code> 方法的时候,会发生如下事情:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</div><div class="line">    <span class="comment">//调用了增加长度的方法,具体增加到多少其实不重要</span></div><div class="line">    ensureCapacityInternal(size + <span class="number">1</span>);</div><div class="line">    <span class="comment">//给 size 的下一个标记位赋值</span></div><div class="line">    elementData[size++] = e;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureCapacityInternal</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</div><div class="line">    <span class="comment">//空集合的时候的处理,其实不怎么重要</span></div><div class="line">    <span class="keyword">if</span> (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) &#123;</div><div class="line">        minCapacity = Math.max(DEFAULT_CAPACITY, minCapacity);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//核心就是接着往下走了</span></div><div class="line">    ensureExplicitCapacity(minCapacity);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureExplicitCapacity</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</div><div class="line">    <span class="comment">//长度不对的时候有用,但是在 add 环境下只是传值给 grow</span></div><div class="line">    <span class="keyword">if</span> (minCapacity - elementData.length &gt; <span class="number">0</span>)</div><div class="line">        grow(minCapacity);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>所以我们会发现其实核心代码还是 <code>grow</code> 方法,其它的都是处理一些特殊情况的.</p>
<h1 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h1><p>在 <code>ArrayList</code> 中有几个类似的方法,他们都有一个特性,就是能够从列表中找到一个特定的元素并且执行某些操作, 例如:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Object o)</span></span>;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(Object o)</span></span>;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">lastIndexOf</span><span class="params">(Object o)</span></span>;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(Object o)</span></span>;</div></pre></td></tr></table></figure>
<p>这些方法都非常类似,所以我们现在研究一下 <code>indexOf</code> 方法:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(Object o)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (o == <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++)</div><div class="line">            <span class="keyword">if</span> (elementData[i]==<span class="keyword">null</span>)</div><div class="line">                <span class="keyword">return</span> i;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++)</div><div class="line">            <span class="keyword">if</span> (o.equals(elementData[i]))</div><div class="line">                <span class="keyword">return</span> i;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>很显然我们能够得到结论:</p>
<ul>
<li>我们在寻找对象的时候会用 for 循环遍历数组中的每一个元素</li>
<li>寻找对象的时候我们使用的是 <code>equals</code> 方法</li>
</ul>
<h1 id="函数方法"><a href="#函数方法" class="headerlink" title="函数方法"></a>函数方法</h1><p>在 <code>ArrayList</code> 中有几个方法,它以函数接口作为参数, 分别是如下方法:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">forEach</span><span class="params">(Consumer&lt;? <span class="keyword">super</span> E&gt; action)</span></span>;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">removeIf</span><span class="params">(Predicate&lt;? <span class="keyword">super</span> E&gt; filter)</span></span>;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">replaceAll</span><span class="params">(UnaryOperator&lt;E&gt; operator)</span></span>;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(Comparator&lt;? <span class="keyword">super</span> E&gt; c)</span></span>;</div></pre></td></tr></table></figure></p>
<p>以下我们会对上面几个方法举例使用或者进行代码分析:</p>
<h2 id="forEach"><a href="#forEach" class="headerlink" title="forEach"></a>forEach</h2><p><code>forEach</code> 方法要求传入一个 consumer, 然后依据我们传入的 lambda 去对列表的每一个元素进行一次消费行为.</p>
<h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">forEach</span><span class="params">(Consumer&lt;? <span class="keyword">super</span> E&gt; action)</span> </span>&#123;</div><div class="line">    <span class="comment">//函数的非空校验</span></div><div class="line">    Objects.requireNonNull(action);</div><div class="line">    <span class="comment">//记录当前操作次数,获取当前的数据和大小</span></div><div class="line">    <span class="keyword">final</span> <span class="keyword">int</span> expectedModCount = modCount;</div><div class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</div><div class="line">    <span class="keyword">final</span> E[] elementData = (E[]) <span class="keyword">this</span>.elementData;</div><div class="line">    <span class="keyword">final</span> <span class="keyword">int</span> size = <span class="keyword">this</span>.size;</div><div class="line"></div><div class="line">    <span class="comment">//对每一个元素进行循环,并且执行对应的消费函数</span></div><div class="line">    <span class="comment">//modCount 是用来防止多线程的时候出现问题的, 这个是一个确保相对线程安全的方案</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; modCount == expectedModCount &amp;&amp; i &lt; size; i++) &#123;</div><div class="line">        action.accept(elementData[i]);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//一旦在遍历结束之后发现中途列表发生了变化,那么抛出异常</span></div><div class="line">    <span class="keyword">if</span> (modCount != expectedModCount) &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="栗子"><a href="#栗子" class="headerlink" title="栗子"></a>栗子</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">base05</span><span class="params">()</span></span>&#123;</div><div class="line">    List&lt;Integer&gt; arrayList = Arrays.asList(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>);</div><div class="line">    arrayList.forEach(i -&gt; &#123;</div><div class="line">        System.out.println(i);</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="removeIf"><a href="#removeIf" class="headerlink" title="removeIf"></a>removeIf</h2><p><code>removeIf</code> 方法要求传入一个 predicate 并且将返回值为 true 的移除方法.和 stream 的 filter 有些类似.</p>
<h3 id="栗子-1"><a href="#栗子-1" class="headerlink" title="栗子"></a>栗子</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">base06</span><span class="params">()</span></span>&#123;</div><div class="line">    List&lt;Integer&gt; arrayList = Arrays.asList(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>);</div><div class="line">    ArrayList&lt;Integer&gt; newList = <span class="keyword">new</span> ArrayList&lt;Integer&gt;(arrayList);</div><div class="line">    newList.removeIf(i -&gt; &#123;</div><div class="line">        <span class="keyword">return</span> i % <span class="number">2</span> == <span class="number">0</span>;</div><div class="line">    &#125;);</div><div class="line">    newList.forEach(i -&gt; &#123;</div><div class="line">        System.out.println(i);</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="replaceAll"><a href="#replaceAll" class="headerlink" title="replaceAll"></a>replaceAll</h2><p><code>replaceAll</code> 方法接受一个 UnaryOperator 函数,返回相同类型的数据来替换原有数据</p>
<h3 id="源码-1"><a href="#源码-1" class="headerlink" title="源码"></a>源码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">replaceAll</span><span class="params">(UnaryOperator&lt;E&gt; operator)</span> </span>&#123;</div><div class="line">    <span class="comment">//非空校验</span></div><div class="line">    Objects.requireNonNull(operator);</div><div class="line">    <span class="comment">//记录当前操作次数,获取当前的数据和大小</span></div><div class="line">    <span class="keyword">final</span> <span class="keyword">int</span> expectedModCount = modCount;</div><div class="line">    <span class="keyword">final</span> <span class="keyword">int</span> size = <span class="keyword">this</span>.size;</div><div class="line"></div><div class="line">    <span class="comment">//对每一个元素进行循环,并且执行对应的函数</span></div><div class="line">    <span class="comment">//modCount 是用来防止多线程的时候出现问题的, 这个是一个确保相对线程安全的方案</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; modCount == expectedModCount &amp;&amp; i &lt; size; i++) &#123;</div><div class="line">        elementData[i] = operator.apply((E) elementData[i]);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//一旦在遍历结束之后发现中途列表发生了变化,那么抛出异常</span></div><div class="line">    <span class="keyword">if</span> (modCount != expectedModCount) &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</div><div class="line">    &#125;</div><div class="line">    modCount++;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="栗子-2"><a href="#栗子-2" class="headerlink" title="栗子"></a>栗子</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">base07</span><span class="params">()</span></span>&#123;</div><div class="line">    List&lt;Integer&gt; arrayList = Arrays.asList(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>);</div><div class="line">    ArrayList&lt;Integer&gt; newList = <span class="keyword">new</span> ArrayList&lt;Integer&gt;(arrayList);</div><div class="line">    newList.replaceAll(i -&gt; &#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">10</span> - i;</div><div class="line">    &#125;);</div><div class="line">    newList.forEach(i -&gt; &#123;</div><div class="line">        System.out.println(i);</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h2><p><code>sort</code> 方法需要传入一个 comparator 接口对象的函数,表示用来比较两个数的大小的函数</p>
<h3 id="源码-2"><a href="#源码-2" class="headerlink" title="源码"></a>源码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(Comparator&lt;? <span class="keyword">super</span> E&gt; c)</span> </span>&#123;</div><div class="line">    <span class="keyword">final</span> <span class="keyword">int</span> expectedModCount = modCount;</div><div class="line">    Arrays.sort((E[]) elementData, <span class="number">0</span>, size, c);</div><div class="line">    <span class="keyword">if</span> (modCount != expectedModCount) &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</div><div class="line">    &#125;</div><div class="line">    modCount++;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="栗子-3"><a href="#栗子-3" class="headerlink" title="栗子"></a>栗子</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">base08</span><span class="params">()</span></span>&#123;</div><div class="line">    List&lt;Integer&gt; arrayList = Arrays.asList(<span class="number">934</span>,<span class="number">2</span>,<span class="number">13</span>,<span class="number">43</span>,<span class="number">5</span>);</div><div class="line">    ArrayList&lt;Integer&gt; newList = <span class="keyword">new</span> ArrayList&lt;Integer&gt;(arrayList);</div><div class="line">    newList.sort((a,b) -&gt; &#123;</div><div class="line">        <span class="keyword">if</span>(a &gt; b)&#123; <span class="keyword">return</span> <span class="number">1</span>;&#125;</div><div class="line">        <span class="keyword">else</span> &#123;<span class="keyword">return</span> -<span class="number">1</span>;&#125;</div><div class="line">    &#125;);</div><div class="line">    newList.forEach(i -&gt; &#123;</div><div class="line">        System.out.println(i);</div><div class="line">    &#125;);</div></pre></td></tr></table></figure>
<hr>
<p>有关 <code>ArrayList</code> 的学习就到这里.<br>之后我们会继续学习 <code>LinkedList</code> 的相关内容.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天回头研究一下 java 中的列表 &lt;code&gt;ArrayList&lt;/code&gt; ,它表示用数组来存储一系列的对象,并且支持 &lt;code&gt;List&lt;/code&gt; 的特性.&lt;/p&gt;
&lt;p&gt;我们今天研究一下它的基础&lt;strong&gt;&lt;em&gt;属性&lt;/em&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;em&gt;添加方法&lt;/em&gt;&lt;/strong&gt;, 以及与 lambda 相关的部分.&lt;/p&gt;
&lt;h1 id=&quot;属性&quot;&gt;&lt;a href=&quot;#属性&quot; class=&quot;headerlink&quot; title=&quot;属性&quot;&gt;&lt;/a&gt;属性&lt;/h1&gt;&lt;h2 id=&quot;默认容量&quot;&gt;&lt;a href=&quot;#默认容量&quot; class=&quot;headerlink&quot; title=&quot;默认容量&quot;&gt;&lt;/a&gt;默认容量&lt;/h2&gt;&lt;p&gt;表示新建一个 &lt;code&gt;ArrayList&lt;/code&gt; 的初始化空间.&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; DEFAULT_CAPACITY = &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="ArrayList" scheme="http://yoursite.com/tags/ArrayList/"/>
    
  </entry>
  
  <entry>
    <title>Java lambda 简述</title>
    <link href="http://yoursite.com/2017/05/05/Java-lambda-%E7%AE%80%E8%BF%B0/"/>
    <id>http://yoursite.com/2017/05/05/Java-lambda-简述/</id>
    <published>2017-05-05T14:16:35.000Z</published>
    <updated>2017-05-05T15:26:47.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><p>Java 8 提供了 lambda 表达式.用来实现函数式编程.</p>
<p>可能会有类似的形式:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//返回一个对象</span></div><div class="line">() -&gt; &#123;<span class="keyword">return</span> <span class="keyword">new</span> Random().nextInt();&#125;</div><div class="line"><span class="comment">//消费一个对象</span></div><div class="line">x -&gt; &#123; System.out.println(x);&#125;</div><div class="line"><span class="comment">//把一个对象变成另一个</span></div><div class="line">x -&gt; &#123;<span class="keyword">return</span> x * <span class="number">100</span>;&#125;</div><div class="line"><span class="comment">//处理两个对象</span></div><div class="line">(x,y) -&gt; ( <span class="keyword">return</span> x*y;)</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>可以引用外部对象,但是它必须是既成事实的 final 变量.<br>表示这个变量可以不是 final 的但是只能赋一次值.</p>
<p>在 java 中,对于只有一个抽象方法的接口.叫做<strong>函数接口</strong>,可以有更多方法,但是只能是默认方法和具体方法.</p>
<p>所以 java 8 中提供了一个标签<code>@FunctionalInterface</code>用于保证接口是函数接口</p>
<h2 id="java-8-中提供了几大函数式接口"><a href="#java-8-中提供了几大函数式接口" class="headerlink" title="java 8 中提供了几大函数式接口:"></a>java 8 中提供了几大函数式接口:</h2><h3 id="Predicate"><a href="#Predicate" class="headerlink" title="Predicate"></a>Predicate</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Predicate</span>&lt;<span class="title">T</span>&gt;</span></div></pre></td></tr></table></figure>
<p>该函数表示一个对象到布尔值类型的转变<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">x -&gt; &#123;<span class="keyword">return</span> <span class="keyword">true</span>;&#125;</div></pre></td></tr></table></figure></p>
<h3 id="Consumer"><a href="#Consumer" class="headerlink" title="Consumer"></a>Consumer</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Consumer</span>&lt;<span class="title">T</span>&gt;</span></div></pre></td></tr></table></figure>
<p>该函数表示对一个对象的使用,并且不返回值<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">x -&gt; &#123;System.out.println(x);&#125;</div></pre></td></tr></table></figure></p>
<h3 id="Function"><a href="#Function" class="headerlink" title="Function"></a>Function</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Function</span>&lt;<span class="title">T</span>, <span class="title">R</span>&gt;</span></div></pre></td></tr></table></figure>
<p>该函数表示对一个对象转变为另一个对象<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">x -&gt; &#123; <span class="keyword">return</span> (AnotherType)x;&#125;</div></pre></td></tr></table></figure></p>
<h3 id="Supplier"><a href="#Supplier" class="headerlink" title="Supplier"></a>Supplier</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Supplier</span>&lt;<span class="title">T</span>&gt;</span></div></pre></td></tr></table></figure>
<p>该函数生成一个类型的对象<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">() -&gt; &#123;<span class="keyword">return</span> (T)<span class="keyword">new</span> Instance();&#125;</div></pre></td></tr></table></figure></p>
<h3 id="BiPredicate"><a href="#BiPredicate" class="headerlink" title="BiPredicate"></a>BiPredicate</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BiPredicate</span>&lt;<span class="title">T</span>, <span class="title">U</span>&gt;</span></div></pre></td></tr></table></figure>
<p>该函数表示两个对象到布尔值的转变<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">(x,y) -&gt; &#123;<span class="keyword">return</span> x &gt; y;&#125;</div></pre></td></tr></table></figure></p>
<h3 id="BiConsumer"><a href="#BiConsumer" class="headerlink" title="BiConsumer"></a>BiConsumer</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BiConsumer</span>&lt;<span class="title">T</span>, <span class="title">U</span>&gt;</span></div></pre></td></tr></table></figure>
<p>该函数表示消费两个对象<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">(x,y) -&gt; &#123; System.out.println(x+y);&#125;</div></pre></td></tr></table></figure></p>
<h3 id="BiFunction"><a href="#BiFunction" class="headerlink" title="BiFunction"></a>BiFunction</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BiFunction</span>&lt;<span class="title">T</span>, <span class="title">U</span>, <span class="title">R</span>&gt;</span></div></pre></td></tr></table></figure>
<p>该函数消费两个对象 T 和 U 生成一个类型为 R 的对象<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">(T t, U u) -&gt; &#123;<span class="keyword">return</span> (R) r;&#125;</div></pre></td></tr></table></figure></p>
<hr>
<p>在很多的方法中会要求参数中返回如上的一些接口实例,当我们需要传入对应的接口对象的时候,我们可以用函数 lambda 来代替对接口的实现类.<br>通常代码中会通过接口类型来提示我们需要使用的函数类型.我们可以根据如上给出的例子来实现接口.<br>实例可参考之前的文章: <a href="/2017/05/04/CompletableFuture解析/" title="CompletableFuture解析">CompletableFuture解析</a></p>
<hr>
<p>本篇只是一个简单的介绍,如果有机会后面会继续介绍相关的内容.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简述&quot;&gt;&lt;a href=&quot;#简述&quot; class=&quot;headerlink&quot; title=&quot;简述&quot;&gt;&lt;/a&gt;简述&lt;/h2&gt;&lt;p&gt;Java 8 提供了 lambda 表达式.用来实现函数式编程.&lt;/p&gt;
&lt;p&gt;可能会有类似的形式:&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//返回一个对象&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;() -&amp;gt; &amp;#123;&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Random().nextInt();&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//消费一个对象&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;x -&amp;gt; &amp;#123; System.out.println(x);&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//把一个对象变成另一个&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;x -&amp;gt; &amp;#123;&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; x * &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//处理两个对象&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;(x,y) -&amp;gt; ( &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; x*y;)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="lambda" scheme="http://yoursite.com/tags/lambda/"/>
    
  </entry>
  
  <entry>
    <title>CompletableFuture解析</title>
    <link href="http://yoursite.com/2017/05/04/CompletableFuture%E8%A7%A3%E6%9E%90/"/>
    <id>http://yoursite.com/2017/05/04/CompletableFuture解析/</id>
    <published>2017-05-04T06:52:56.000Z</published>
    <updated>2017-05-05T13:11:05.000Z</updated>
    
    <content type="html"><![CDATA[<p>这几天稍微花时间学习了一下 java 8 提供的处理异步调用的一个 future 类 <code>CompletableFuture</code>.</p>
<p>这是一个针对函数式的 future 对象.用来让我们更加优雅的使用异步调用.</p>
<h1 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h1><p><code>CompletableFuture</code>是<code>Future</code>接口的实现类.内部只有两个属性:<code>result</code>和<code>stack</code>两个值,分别表示对象所存储的内容以及对象现在的完成状况.</p>
<p>由于<code>CompletableFuture</code>也是 future 对象的一部分,所以它也有 future 的相关特性.博主在这里认为它最终要的内容就是他的执行时间,就是:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">CompletableFuture 只在对象创建的时候才开始尝试执行</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<h2 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h2><p><code>CompletableFuture</code>有两类最基本的创建对象的静态方法:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;U&gt; <span class="function">CompletableFuture&lt;U&gt; <span class="title">supplyAsync</span><span class="params">(Supplier&lt;U&gt; supplier)</span></span>;</div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;U&gt; <span class="function">CompletableFuture&lt;U&gt; <span class="title">supplyAsync</span><span class="params">(Supplier&lt;U&gt; supplier, Executor executor)</span></span>;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> CompletableFuture&lt;Void&gt; <span class="title">runAsync</span><span class="params">(Runnable runnable)</span></span>;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> CompletableFuture&lt;Void&gt; <span class="title">runAsync</span><span class="params">(Runnable runnable, Executor executor)</span></span>;</div></pre></td></tr></table></figure></p>
<blockquote>
<ul>
<li>supplyAsync 表示需要传入一个 <code>Supplier</code> 类型的 lambda 表达式来创建一个新的对象</li>
<li>runAsync 方法表示需要传入一个 <code>Runnable</code> 类型的对象来创建一个新的对象</li>
<li>supplyAsync 返回的对象带有生成值,而 runAsync 方法返回的对象只能用来确认该操作是否已经完成而不能获取到内容.在这一点上和<code>Runnable</code>的情况有些类似</li>
<li>两个方法都有对应的重写方法, 需要传入线程池,如果不传入线程池,则会默认使用<code>ForkJoinPool</code>线程池</li>
</ul>
</blockquote>
<h2 id="获取对象内容"><a href="#获取对象内容" class="headerlink" title="获取对象内容"></a>获取对象内容</h2><p><code>CompletableFuture</code>有几个相关方法,包括:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> T <span class="title">get</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException, ExecutionException</span>;</div><div class="line"><span class="function"><span class="keyword">public</span> T <span class="title">get</span><span class="params">(<span class="keyword">long</span> timeout, TimeUnit unit)</span> <span class="keyword">throws</span> InterruptedException, ExecutionException, TimeoutException</span>;</div><div class="line"><span class="function"><span class="keyword">public</span> T <span class="title">join</span><span class="params">()</span></span>;</div><div class="line"><span class="function"><span class="keyword">public</span> T <span class="title">getNow</span><span class="params">(T valueIfAbsent)</span></span>;</div></pre></td></tr></table></figure></p>
<blockquote>
<ul>
<li>get 方法会使当前线程阻塞,并且等待直到 future 完成,并且将返回 future 的值</li>
<li>带参数的 get 方法需要传入对应的时间长度,一旦超出这个时间,会抛出<code>TimeoutException</code><blockquote>
<p>其中 <code>TimeUnit</code> 是一个表示时间类型的枚举,最小单位:纳秒,最大单位:日<br>[NANOSECONDS(纳秒), MICROSECONDS(微秒), MILLISECONDS(毫秒), SECONDS(秒), MINUTES(分), HOURS(时), DAYS(日)]</p>
</blockquote>
</li>
<li>join 方法与 get 并无太大差别,但 join 方法不能被打断.(暂时没搞清楚)</li>
<li>getNow 方法不会阻塞线程,而是立即返回值,如果该 future 当前没有完成,则会立刻返回该方法的传入参数.</li>
<li>get 和 join 方法会在正常的情况下返回值,在遇到异常的情况下将异常<strong><em>抛出</em></strong></li>
</ul>
</blockquote>
<h2 id="完成对象"><a href="#完成对象" class="headerlink" title="完成对象"></a>完成对象</h2><p><code>CompletableFuture</code>有两个完成方法:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">complete</span><span class="params">(T value)</span></span>;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">completeExceptionally</span><span class="params">(Throwable ex)</span></span>;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">cancel</span><span class="params">(<span class="keyword">boolean</span> mayInterruptIfRunning)</span></span>;</div></pre></td></tr></table></figure></p>
<blockquote>
<ul>
<li>complete 方法将future状态置为已完成,并且将参数注入,但如果这个future已经完成了,则不会产生任何变化</li>
<li>completeExceptionally 方法将future状态置为已完成,并且将异常参数注入,并且在get的时候回获取这个异常,但如果这个future已经完成了,则不会产生任何变化</li>
<li>cancel 方法会取消 future 对象,并且置入一个 CancellationException. 参数表示是否会打断 future 的执行(目前没有测试过)</li>
</ul>
</blockquote>
<h2 id="检验方法"><a href="#检验方法" class="headerlink" title="检验方法"></a>检验方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isDone</span><span class="params">()</span></span>;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isCancelled</span><span class="params">()</span></span>;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isCompletedExceptionally</span><span class="params">()</span></span>;</div></pre></td></tr></table></figure>
<blockquote>
<ul>
<li>isDone 用来返回 future 对象是否已经完成</li>
<li>isCancelled 用来返回 future 对象是否已经被取消</li>
<li>isCompletedExceptionally 用来返回 future 是否出现了异常</li>
</ul>
</blockquote>
<h2 id="then-方法"><a href="#then-方法" class="headerlink" title="then 方法"></a>then 方法</h2><p><code>CompletableFuture</code>有一系列延续方法,大部分都以 then 开头.</p>
<ul>
<li>都表示在 future 对象<strong><em>已完成</em></strong>之后进行某种操作.</li>
<li>方法都会返回一个新的 <code>CompletableFuture</code>对象</li>
<li>方法的<code>Executor</code>参数表示是否需要传入一个线程池来开启新线程操作</li>
<li><code>CompletableFuture</code>对象可以嵌套</li>
<li>lambda中可以抛出 RuntimeException .不可以抛出 Exception.</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//该方法的传入一个 T -&gt; U 的Function&lt;T,U&gt;, 并且返回 &lt;U&gt; 的CompletableFuture</span></div><div class="line"><span class="keyword">public</span> &lt;U&gt; <span class="function">CompletableFuture&lt;U&gt; <span class="title">thenApply</span><span class="params">(Function&lt;? <span class="keyword">super</span> T,? extends U&gt; fn)</span></span>;</div><div class="line"><span class="keyword">public</span> &lt;U&gt; <span class="function">CompletableFuture&lt;U&gt; <span class="title">thenApplyAsync</span><span class="params">(Function&lt;? <span class="keyword">super</span> T,? extends U&gt; fn)</span></span>;</div><div class="line"><span class="keyword">public</span> &lt;U&gt; <span class="function">CompletableFuture&lt;U&gt; <span class="title">thenApplyAsync</span><span class="params">(Function&lt;? <span class="keyword">super</span> T,? extends U&gt; fn, Executor executor)</span></span>;</div><div class="line"><span class="comment">//传入一个 Consumer 函数来完成. 返回值没有内容</span></div><div class="line"><span class="function"><span class="keyword">public</span> CompletableFuture&lt;Void&gt; <span class="title">thenAccept</span><span class="params">(Consumer&lt;? <span class="keyword">super</span> T&gt; action)</span></span>;</div><div class="line"><span class="function"><span class="keyword">public</span> CompletableFuture&lt;Void&gt; <span class="title">thenAcceptAsync</span><span class="params">(Consumer&lt;? <span class="keyword">super</span> T&gt; action)</span></span>;</div><div class="line"><span class="function"><span class="keyword">public</span> CompletableFuture&lt;Void&gt; <span class="title">thenAcceptAsync</span><span class="params">(Consumer&lt;? <span class="keyword">super</span> T&gt; action,Executor executor)</span></span>;</div><div class="line"><span class="comment">//与 thenAccept 方法相同,但是传入参数为 Runnable</span></div><div class="line"><span class="function"><span class="keyword">public</span> CompletableFuture&lt;Void&gt; <span class="title">thenRun</span><span class="params">(Runnable action)</span></span>;</div><div class="line"><span class="function"><span class="keyword">public</span> CompletableFuture&lt;Void&gt; <span class="title">thenRunAsync</span><span class="params">(Runnable action)</span></span>;</div><div class="line"><span class="function"><span class="keyword">public</span> CompletableFuture&lt;Void&gt; <span class="title">thenRunAsync</span><span class="params">(Runnable action,Executor executor)</span></span>;</div><div class="line"><span class="comment">//thenCombine 针对两个 future 进行操作.</span></div><div class="line"><span class="comment">//需要传入另一个 future 以及 一个 BiFunction&lt;T,U,V&gt; ,返回一个新的 future.</span></div><div class="line"><span class="keyword">public</span> &lt;U,V&gt; <span class="function">CompletableFuture&lt;V&gt; <span class="title">thenCombine</span><span class="params">(CompletionStage&lt;? extends U&gt; other,BiFunction&lt;? <span class="keyword">super</span> T,? <span class="keyword">super</span> U,? extends V&gt; fn)</span></span>;</div><div class="line"><span class="keyword">public</span> &lt;U,V&gt; <span class="function">CompletableFuture&lt;V&gt; <span class="title">thenCombineAsync</span><span class="params">(CompletionStage&lt;? extends U&gt; other,BiFunction&lt;? <span class="keyword">super</span> T,? <span class="keyword">super</span> U,? extends V&gt; fn)</span></span>;</div><div class="line"><span class="keyword">public</span> &lt;U,V&gt; <span class="function">CompletableFuture&lt;V&gt; <span class="title">thenCombineAsync</span><span class="params">(CompletionStage&lt;? extends U&gt; other,BiFunction&lt;? <span class="keyword">super</span> T,? <span class="keyword">super</span> U,? extends V&gt; fn, Executor executor)</span></span>;</div><div class="line"><span class="comment">//thenAcceptBoth 同时等待两个 future ,并且返回一个空的CompletableFuture,</span></div><div class="line"><span class="comment">//Bi lambda 的两个参数分别接受的两个参数 第一个接受 this , 第二个接受第一个参数返回</span></div><div class="line"><span class="keyword">public</span> &lt;U&gt; <span class="function">CompletableFuture&lt;Void&gt; <span class="title">thenAcceptBoth</span><span class="params">(CompletionStage&lt;? extends U&gt; other,BiConsumer&lt;? <span class="keyword">super</span> T, ? <span class="keyword">super</span> U&gt; action)</span></span>;</div><div class="line"><span class="keyword">public</span> &lt;U&gt; <span class="function">CompletableFuture&lt;Void&gt; <span class="title">thenAcceptBothAsync</span><span class="params">(CompletionStage&lt;? extends U&gt; other,BiConsumer&lt;? <span class="keyword">super</span> T, ? <span class="keyword">super</span> U&gt; action)</span></span>;</div><div class="line"><span class="keyword">public</span> &lt;U&gt; <span class="function">CompletableFuture&lt;Void&gt; <span class="title">thenAcceptBothAsync</span><span class="params">(CompletionStage&lt;? extends U&gt; other,BiConsumer&lt;? <span class="keyword">super</span> T, ? <span class="keyword">super</span> U&gt; action, Executor executor)</span></span>;</div><div class="line"><span class="comment">//和thenAcceptBoth方法相同,但是传入参数为 Runnable</span></div><div class="line"><span class="function"><span class="keyword">public</span> CompletableFuture&lt;Void&gt; <span class="title">runAfterBoth</span><span class="params">(CompletionStage&lt;?&gt; other,Runnable action)</span></span>;</div><div class="line"><span class="function"><span class="keyword">public</span> CompletableFuture&lt;Void&gt; <span class="title">runAfterBothAsync</span><span class="params">(CompletionStage&lt;?&gt; other,Runnable action)</span></span>;</div><div class="line"><span class="function"><span class="keyword">public</span> CompletableFuture&lt;Void&gt; <span class="title">runAfterBothAsync</span><span class="params">(CompletionStage&lt;?&gt; other,Runnable action,Executor executor)</span></span>;</div><div class="line"><span class="comment">//同时等待两个 future 同时完成 ,并且对第二个返回的 future 进行处理.</span></div><div class="line"><span class="keyword">public</span> &lt;U&gt; <span class="function">CompletableFuture&lt;U&gt; <span class="title">applyToEither</span><span class="params">(CompletionStage&lt;? extends T&gt; other, Function&lt;? <span class="keyword">super</span> T, U&gt; fn)</span></span>;</div><div class="line"><span class="keyword">public</span> &lt;U&gt; <span class="function">CompletableFuture&lt;U&gt; <span class="title">applyToEitherAsync</span><span class="params">(CompletionStage&lt;? extends T&gt; other, Function&lt;? <span class="keyword">super</span> T, U&gt; fn)</span></span>;</div><div class="line"><span class="keyword">public</span> &lt;U&gt; <span class="function">CompletableFuture&lt;U&gt; <span class="title">applyToEitherAsync</span><span class="params">(CompletionStage&lt;? extends T&gt; other, Function&lt;? <span class="keyword">super</span> T, U&gt; fn,Executor executor)</span></span>;</div><div class="line"><span class="comment">//同时等待两个 future ,并且对第二个 future 的返回值进行消费.</span></div><div class="line"><span class="function"><span class="keyword">public</span> CompletableFuture&lt;Void&gt; <span class="title">acceptEither</span><span class="params">(CompletionStage&lt;? extends T&gt; other, Consumer&lt;? <span class="keyword">super</span> T&gt; action)</span></span>;</div><div class="line"><span class="function"><span class="keyword">public</span> CompletableFuture&lt;Void&gt; <span class="title">acceptEitherAsync</span><span class="params">(CompletionStage&lt;? extends T&gt; other, Consumer&lt;? <span class="keyword">super</span> T&gt; action)</span></span>;</div><div class="line"><span class="function"><span class="keyword">public</span> CompletableFuture&lt;Void&gt; <span class="title">acceptEitherAsync</span><span class="params">(CompletionStage&lt;? extends T&gt; other, Consumer&lt;? <span class="keyword">super</span> T&gt; action, Executor executor)</span></span>;</div><div class="line"><span class="comment">//和 acceptEitherAsync 相同,并且传入 Runnable</span></div><div class="line"><span class="function"><span class="keyword">public</span> CompletableFuture&lt;Void&gt; <span class="title">runAfterEither</span><span class="params">(CompletionStage&lt;?&gt; other,Runnable action)</span></span>;</div><div class="line"><span class="function"><span class="keyword">public</span> CompletableFuture&lt;Void&gt; <span class="title">runAfterEitherAsync</span><span class="params">(CompletionStage&lt;?&gt; other, Runnable action)</span></span>;</div><div class="line"><span class="function"><span class="keyword">public</span> CompletableFuture&lt;Void&gt; <span class="title">runAfterEitherAsync</span><span class="params">(CompletionStage&lt;?&gt; other,Runnable action,Executor executor)</span></span>;</div><div class="line"><span class="comment">//thenCompose 接受一个 Function 并且返回一个新的 CompletableFuture 对象.</span></div><div class="line"><span class="comment">//所收集到的对象是没有嵌套的 CompletableFuture 对象. 类似 flatMap 的效果</span></div><div class="line"><span class="keyword">public</span> &lt;U&gt; <span class="function">CompletableFuture&lt;U&gt; <span class="title">thenCompose</span><span class="params">(Function&lt;? <span class="keyword">super</span> T, ? extends CompletionStage&lt;U&gt;&gt; fn)</span></span>;</div><div class="line"><span class="keyword">public</span> &lt;U&gt; <span class="function">CompletableFuture&lt;U&gt; <span class="title">thenComposeAsync</span><span class="params">(Function&lt;? <span class="keyword">super</span> T, ? extends CompletionStage&lt;U&gt;&gt; fn)</span></span>;</div><div class="line"><span class="keyword">public</span> &lt;U&gt; <span class="function">CompletableFuture&lt;U&gt; <span class="title">thenComposeAsync</span><span class="params">(Function&lt;? <span class="keyword">super</span> T, ? extends CompletionStage&lt;U&gt;&gt; fn,Executor executor)</span></span>;</div><div class="line"><span class="comment">//whenComplete 接受 future 中抛出的异常和返回</span></div><div class="line"><span class="comment">//在返回或者异常之后对返回值进行消费,或者返回正常结果</span></div><div class="line"><span class="function"><span class="keyword">public</span> CompletableFuture&lt;T&gt; <span class="title">whenComplete</span><span class="params">(BiConsumer&lt;? <span class="keyword">super</span> T, ? <span class="keyword">super</span> Throwable&gt; action)</span></span>;</div><div class="line"><span class="function"><span class="keyword">public</span> CompletableFuture&lt;T&gt; <span class="title">whenCompleteAsync</span><span class="params">(BiConsumer&lt;? <span class="keyword">super</span> T, ? <span class="keyword">super</span> Throwable&gt; action)</span></span>;</div><div class="line"><span class="function"><span class="keyword">public</span> CompletableFuture&lt;T&gt; <span class="title">whenCompleteAsync</span><span class="params">(BiConsumer&lt;? <span class="keyword">super</span> T, ? <span class="keyword">super</span> Throwable&gt; action, Executor executor)</span></span>;</div><div class="line"><span class="comment">//handleAsync 接受一个 function&lt;返回值,异常,结果&gt; 并在返回之后对 future 的相应进行处理</span></div><div class="line"><span class="keyword">public</span> &lt;U&gt; <span class="function">CompletableFuture&lt;U&gt; <span class="title">handle</span><span class="params">(BiFunction&lt;? <span class="keyword">super</span> T, Throwable, ? extends U&gt; fn)</span></span>;</div><div class="line"><span class="keyword">public</span> &lt;U&gt; <span class="function">CompletableFuture&lt;U&gt; <span class="title">handleAsync</span><span class="params">(BiFunction&lt;? <span class="keyword">super</span> T, Throwable, ? extends U&gt; fn)</span></span>;</div><div class="line"><span class="keyword">public</span> &lt;U&gt; <span class="function">CompletableFuture&lt;U&gt; <span class="title">handleAsync</span><span class="params">(BiFunction&lt;? <span class="keyword">super</span> T, Throwable, ? extends U&gt; fn, Executor executor)</span></span>;</div><div class="line"><span class="comment">//exceptionally 会返回一个新的 CompletableFuture, 并且该方法会阻塞当前线程</span></div><div class="line"><span class="comment">//当原有方法发生了异常,exceptionally 的 function 会执行.</span></div><div class="line"><span class="comment">//当原有方法正常完成,则会返回一个相同的结果</span></div><div class="line"><span class="function"><span class="keyword">public</span> CompletableFuture&lt;T&gt; <span class="title">exceptionally</span><span class="params">(Function&lt;Throwable, ? extends T&gt; fn)</span></span>;</div></pre></td></tr></table></figure>
<h2 id="处理多个CompletableFuture"><a href="#处理多个CompletableFuture" class="headerlink" title="处理多个CompletableFuture"></a>处理多个<code>CompletableFuture</code></h2><p>对于多个相互独立的<code>CompletableFuture</code>,我们提供了两个方法来处理它们</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> CompletableFuture&lt;Void&gt; <span class="title">allOf</span><span class="params">(CompletableFuture&lt;?&gt;... cfs)</span></span>;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> CompletableFuture&lt;Object&gt; <span class="title">anyOf</span><span class="params">(CompletableFuture&lt;?&gt;... cfs)</span></span>;</div></pre></td></tr></table></figure>
<h3 id="allOf方法"><a href="#allOf方法" class="headerlink" title="allOf方法"></a>allOf方法</h3><blockquote>
<ul>
<li>CompletableFuture.allOf 静态方法,传入多个独立的 future ,并且返回一个新的CompletableFuture.</li>
<li>当所有的 future 完成时,新的 future 同时完成</li>
<li>不能传入空值</li>
<li>当某个方法出现了异常时,新 future 会在所有 future 完成的时候完成,并且包含一个异常.</li>
</ul>
</blockquote>
<h3 id="anyOf方法"><a href="#anyOf方法" class="headerlink" title="anyOf方法"></a>anyOf方法</h3><blockquote>
<ul>
<li>CompletableFuture.anyOf 静态方法,传入多个独立的 future ,并且返回一个新的CompletableFuture</li>
<li>当任何一个方法完成时,新的 future 完成,并且返回该值</li>
<li>不能传入空值</li>
<li>当某个方法出现了异常时,新 future 会立刻完成,并且携带一个异常</li>
</ul>
</blockquote>
<h2 id="completedFuture-方法"><a href="#completedFuture-方法" class="headerlink" title="completedFuture 方法"></a>completedFuture 方法</h2><ul>
<li>completedFuture 方法是能够直接将值放入 future 对象,常用于测试</li>
<li>CompletableFuture可以嵌套<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;U&gt; <span class="function">CompletableFuture&lt;U&gt; <span class="title">completedFuture</span><span class="params">(U value)</span></span>;</div></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="栗子"><a href="#栗子" class="headerlink" title="栗子"></a>栗子</h1><h2 id="创建对象-1"><a href="#创建对象-1" class="headerlink" title="创建对象"></a>创建对象</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">base01</span><span class="params">()</span> <span class="keyword">throws</span> ExecutionException, InterruptedException </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * CompletableFuture的静态方法supplyAsync(Supplier&lt;U&gt; supplier)返回一个带有</div><div class="line">     * ForkJoinPool 线程池的 CompletableFuture 对象.</div><div class="line">     * CompletableFuture 对象可以调用get方法,这样会使线程阻塞.</div><div class="line">     * Supplier&lt;T&gt; 接口是一个 () -&gt; T 的函数</div><div class="line">     */</div><div class="line">    CompletableFuture future = CompletableFuture.supplyAsync(getRandomInt());</div><div class="line">    System.out.println(future.get());</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">base02</span><span class="params">()</span> <span class="keyword">throws</span> ExecutionException, InterruptedException </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * CompletableFuture的静态方法supplyAsync(Supplier&lt;U&gt; supplier, Executor executor)</div><div class="line">     * 返回一个带有自定义的线程池的CompletableFuture对象.</div><div class="line">     */</div><div class="line">    CompletableFuture future = CompletableFuture.supplyAsync(getRandomInt(), Executors.newCachedThreadPool());</div><div class="line">    System.out.println(future.get());</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">base03</span><span class="params">()</span> <span class="keyword">throws</span> ExecutionException, InterruptedException </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * CompletableFuture的静态方法 runAsync(Runnable runnable)返回一个带有</div><div class="line">     * ForkJoinPool线程池的CompletableFuture对象.但是这个对象没有返回值</div><div class="line">     */</div><div class="line">    CompletableFuture future = CompletableFuture.runAsync(getRandomIntRunnable());</div><div class="line">    Assert.assertEquals(<span class="keyword">null</span>,future.get());</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">base04</span><span class="params">()</span> <span class="keyword">throws</span> ExecutionException, InterruptedException </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * CompletableFuture的静态方法 runAsync(Runnable runnable, Executor executor)</div><div class="line">     * 返回一个带有自定义的线程池的CompletableFuture对象.但是这个对象没有返回值</div><div class="line">     */</div><div class="line">    CompletableFuture future = CompletableFuture.runAsync(getRandomIntRunnable(), Executors.newCachedThreadPool());</div><div class="line">    Assert.assertEquals(<span class="keyword">null</span>,future.get());</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="获取对象内容-1"><a href="#获取对象内容-1" class="headerlink" title="获取对象内容"></a>获取对象内容</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">base06</span><span class="params">()</span> <span class="keyword">throws</span> ExecutionException, InterruptedException, TimeoutException </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * get(long,TimeUnit) 方法阻塞并且等待返回结果,TimeUnit表示时间长度单位,最小是纳秒.</div><div class="line">     * 当超时未返回信息的时候回抛出TimeoutException异常</div><div class="line">     */</div><div class="line">    CompletableFuture future = CompletableFuture.supplyAsync(getRandomInt());</div><div class="line">    System.out.println(future.get(<span class="number">10</span>, TimeUnit.MILLISECONDS));</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">base07</span><span class="params">()</span> <span class="keyword">throws</span> ExecutionException, InterruptedException </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * join 方法与 get 方法无基本差别</div><div class="line">     */</div><div class="line">    CompletableFuture future = CompletableFuture.supplyAsync(getRandomInt());</div><div class="line">    System.out.println(future.join());</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">base08</span><span class="params">()</span> <span class="keyword">throws</span> ExecutionException, InterruptedException </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * getNow(obj) 方法立即返回结果,如果无结果就返回传入参数</div><div class="line">     */</div><div class="line">    CompletableFuture future = CompletableFuture.supplyAsync(getRandomInt());</div><div class="line">    System.out.println(future.getNow(<span class="string">"1bca"</span>));</div><div class="line">    System.out.println(future.get());</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="完成对象-1"><a href="#完成对象-1" class="headerlink" title="完成对象"></a>完成对象</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">base09</span><span class="params">()</span> <span class="keyword">throws</span> ExecutionException, InterruptedException </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * complete 方法将future状态置为已完成,并且将参数注入,但如果这个future已经完成了,则</div><div class="line">     * 不会产生任何变化</div><div class="line">     */</div><div class="line">    CompletableFuture future = CompletableFuture.supplyAsync(getRandomInt());</div><div class="line">    future.complete(<span class="string">"123"</span>);</div><div class="line">    System.out.println(future.get());</div><div class="line">    future.complete(<span class="string">"345"</span>);</div><div class="line">    System.out.println(future.get());</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">base10</span><span class="params">()</span> <span class="keyword">throws</span> ExecutionException, InterruptedException </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * completeExceptionally 方法将future状态置为已完成,并且将异常参数注入,</div><div class="line">     * 并且在get的时候回获取这个异常</div><div class="line">     * 但如果这个future已经完成了,则不会产生任何变化</div><div class="line">     */</div><div class="line">    CompletableFuture future = CompletableFuture.supplyAsync(getRandomInt());</div><div class="line">    future.complete(<span class="string">"123"</span>);</div><div class="line">    System.out.println(future.get());</div><div class="line">    future.complete(<span class="string">"345"</span>);</div><div class="line">    System.out.println(future.get());</div><div class="line">    future.completeExceptionally(<span class="keyword">new</span> Exception(<span class="string">"abc"</span>));</div><div class="line">    System.out.println(future.get());</div><div class="line">    future = CompletableFuture.supplyAsync(getRandomInt());</div><div class="line">    future.completeExceptionally(<span class="keyword">new</span> Exception(<span class="string">"abc"</span>));</div><div class="line">    System.out.println(future.get());</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="检验方法-1"><a href="#检验方法-1" class="headerlink" title="检验方法"></a>检验方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">base20</span><span class="params">()</span> <span class="keyword">throws</span> ExecutionException, InterruptedException </span>&#123;</div><div class="line">        <span class="comment">/**</span></div><div class="line">         * cancel 方法会取消 future 对象,并且置入一个 CancellationException</div><div class="line">         */</div><div class="line">        CompletableFuture future = CompletableFuture.supplyAsync(getRandomInt());</div><div class="line">        System.out.println(<span class="string">"done?"</span>+future.isDone()+<span class="string">" cancel?"</span>+future.isCancelled()+<span class="string">" exp?"</span>+future.isCompletedExceptionally());</div><div class="line"><span class="comment">//        future.get();</span></div><div class="line">        future.cancel(<span class="keyword">false</span>);</div><div class="line">        System.out.println(<span class="string">"done?"</span>+future.isDone()+<span class="string">" cancel?"</span>+future.isCancelled()+<span class="string">" exp?"</span>+future.isCompletedExceptionally());</div><div class="line">        future.get();</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h2 id="then-方法-1"><a href="#then-方法-1" class="headerlink" title="then 方法"></a>then 方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">base11</span><span class="params">()</span> <span class="keyword">throws</span> ExecutionException, InterruptedException </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * thenApplyAsync 方法会在前一个future *已完成* 的情况下开始执行方法中的lambda函数.</div><div class="line">     * 并且返回一个新的future对象.</div><div class="line">     * 该方法的传入一个 T -&gt; U 的Function&lt;T,U&gt;, 并且返回 &lt;U&gt; 的CompletableFuture</div><div class="line">     * 方法的参数表示是否需要传入一个线程池来开启新线程操作</div><div class="line">     */</div><div class="line">    CompletableFuture&lt;Integer&gt; future = CompletableFuture.supplyAsync(getRandomInt());</div><div class="line">    System.out.println(<span class="keyword">new</span> Date().getTime());</div><div class="line">    CompletableFuture&lt;Integer&gt; newFuture = future.thenApplyAsync(x -&gt; &#123;</div><div class="line">        System.out.println(<span class="keyword">new</span> Date().getTime());</div><div class="line">        <span class="keyword">return</span> x * <span class="number">100</span>;</div><div class="line">    &#125;);</div><div class="line">    <span class="comment">//获取两个future的结果</span></div><div class="line">    System.out.println(future.get());</div><div class="line">    System.out.println(newFuture.get());</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">base12</span><span class="params">()</span> <span class="keyword">throws</span> ExecutionException, InterruptedException </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * thenAcceptAsync 传入一个 Consumer 函数来完成.</div><div class="line">     * 其它与 thenApplyAsync 相同</div><div class="line">     * thenRunAsync 方法与此方法相同,但是传入是一个 Runnable</div><div class="line">     */</div><div class="line">    CompletableFuture future = CompletableFuture.supplyAsync(getRandomInt());</div><div class="line">    CompletableFuture future1 = future.thenAcceptAsync(num -&gt; &#123;</div><div class="line">        System.out.println(num);</div><div class="line">    &#125;);</div><div class="line">    future.get();</div><div class="line">    System.out.println(future1.get());</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">base13</span><span class="params">()</span> <span class="keyword">throws</span> ExecutionException, InterruptedException </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * thenCombine 针对两个 future 进行操作.</div><div class="line">     * 需要传入另一个 future 以及 一个 BiFunction&lt;T,U,V&gt; ,返回一个新的 future.</div><div class="line">     */</div><div class="line">    CompletableFuture&lt;Integer&gt; a = CompletableFuture.supplyAsync(getRandomInt());</div><div class="line">    CompletableFuture&lt;Integer&gt; b = CompletableFuture.supplyAsync(getRandomInt(<span class="number">3000l</span>));</div><div class="line">    CompletableFuture c = a.thenCombine(b,(a1,b1) -&gt; &#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            Thread.sleep(<span class="number">200</span>);</div><div class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span>  a1+b1;</div><div class="line">    &#125;);</div><div class="line">    System.out.println(<span class="string">"a:"</span>+a.get());</div><div class="line">    System.out.println(<span class="string">"b:"</span>+b.get());</div><div class="line">    System.out.println(<span class="string">"c:"</span>+c.get());</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">base14</span><span class="params">()</span> <span class="keyword">throws</span> ExecutionException, InterruptedException </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * thenAcceptBoth 同时等待两个 future ,并且返回一个空的CompletableFuture,</div><div class="line">     * Bi lambda 的两个参数分别接受的两个参数 第一个接受 this , 第二个接受第一个参数返回</div><div class="line">     * runAfterBothAsync 方法和此方法相同,但是传入参数为 Runnable</div><div class="line">     */</div><div class="line">    CompletableFuture&lt;Integer&gt; a = CompletableFuture.supplyAsync(getRandomInt());</div><div class="line">    CompletableFuture&lt;Integer&gt; b = CompletableFuture.supplyAsync(getRandomInt(<span class="number">3000l</span>));</div><div class="line">    a.thenAcceptBoth(b,(a1,b1) -&gt; &#123;</div><div class="line">        System.out.println(a1);</div><div class="line">        System.out.println(b1);</div><div class="line">    &#125;);</div><div class="line">    a.get();</div><div class="line">    b.get();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">base15</span><span class="params">()</span> <span class="keyword">throws</span> ExecutionException, InterruptedException </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * applyToEitherAsync 同时等待两个 future 同时完成 ,并且对第二个返回的 future 进行处理.</div><div class="line">     * acceptEitherAsync 同时等待两个 future ,并且对第二个 future 的返回值进行消费.</div><div class="line">     * runAfterEitherAsync 和 acceptEitherAsync 相同,并且传入 Runnable</div><div class="line">     */</div><div class="line">    CompletableFuture&lt;Integer&gt; a = CompletableFuture.supplyAsync(getRandomInt());</div><div class="line">    CompletableFuture&lt;Integer&gt; b = CompletableFuture.supplyAsync(getRandomInt(<span class="number">3000l</span>));</div><div class="line">    CompletableFuture c = a.applyToEitherAsync(b,b1 -&gt; &#123;</div><div class="line">        <span class="keyword">return</span> b1*<span class="number">100</span>;</div><div class="line">    &#125;);</div><div class="line">    a.get();</div><div class="line">    b.get();</div><div class="line">    System.out.println(c.get());</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">base16</span><span class="params">()</span> <span class="keyword">throws</span> ExecutionException, InterruptedException </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * whenComplete 接受 future 中抛出的异常和返回, 方法中可以抛出 RuntimeException .不可以抛出 Exception.</div><div class="line">     * 在返回或者异常之后对返回值进行消费,或者返回正常结果</div><div class="line">     * handleAsync 接受一个 function&lt;返回值,异常,结果&gt; 并在返回之后对 future 的相应进行处理</div><div class="line">     */</div><div class="line">    CompletableFuture future = CompletableFuture.supplyAsync(() -&gt; &#123;</div><div class="line">        <span class="keyword">int</span> a = <span class="keyword">new</span> Random().nextInt(<span class="number">10</span>);</div><div class="line">        <span class="keyword">if</span>(a &gt; <span class="number">5</span>)&#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"too big"</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> a;</div><div class="line">    &#125;);</div><div class="line">    future.whenComplete((res,ex) -&gt; &#123;</div><div class="line">        System.out.println(<span class="string">"result:"</span>+res+<span class="string">", ex:"</span>+ex);</div><div class="line">    &#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">base17</span><span class="params">()</span> <span class="keyword">throws</span> ExecutionException, InterruptedException </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * exceptionally 会返回一个新的 CompletableFuture , 该方法会阻塞,</div><div class="line">     * 当原有方法发生了异常,exceptionally 的 function 会执行.</div><div class="line">     * 当原有方法正常完成,则会返回一个相同的结果</div><div class="line">     */</div><div class="line">    CompletableFuture future = CompletableFuture.supplyAsync(() -&gt; &#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            Thread.sleep(<span class="number">1000</span>);</div><div class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"except"</span>);</div><div class="line">    &#125;);</div><div class="line">    CompletableFuture exfuture = future.exceptionally(ex -&gt; &#123;<span class="keyword">return</span> <span class="keyword">new</span> Exception(((RuntimeException) ex).getMessage());&#125;);</div><div class="line">    System.out.println(exfuture.get());</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">base21</span><span class="params">()</span> <span class="keyword">throws</span> ExecutionException, InterruptedException </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * thenCompose 接受一个 Function 并且返回一个新的 CompletableFuture 对象.</div><div class="line">     * 所收集到的对象是没有嵌套的 CompletableFuture 对象. 类似 flatMap 的效果</div><div class="line">     */</div><div class="line">    CompletableFuture future = CompletableFuture.supplyAsync(getRandomInt());</div><div class="line">    CompletableFuture newFuture = future.thenCompose(num -&gt; &#123;</div><div class="line">        <span class="keyword">return</span> CompletableFuture.completedFuture(num);</div><div class="line">    &#125;);</div><div class="line">    System.out.println(newFuture.get());</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="处理多个CompletableFuture-1"><a href="#处理多个CompletableFuture-1" class="headerlink" title="处理多个CompletableFuture"></a>处理多个<code>CompletableFuture</code></h2><h3 id="allOf方法-1"><a href="#allOf方法-1" class="headerlink" title="allOf方法"></a>allOf方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">base18</span><span class="params">()</span> <span class="keyword">throws</span> ExecutionException, InterruptedException </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * CompletableFuture.allOf 静态方法,传入多个独立的 future ,并且返回一个新的CompletableFuture</div><div class="line">     * 当所有的 future 完成时,新的 future 同时完成,</div><div class="line">     * 不能传入空值</div><div class="line">     * 当某个方法出现了异常时,新 future 会在所有 future 完成的时候完成,并且包含一个异常.</div><div class="line">     */</div><div class="line">    CompletableFuture&lt;Integer&gt; a = CompletableFuture.supplyAsync(getRandomInt());</div><div class="line">    CompletableFuture&lt;Integer&gt; b = CompletableFuture.supplyAsync(getRandomInt(<span class="number">3000l</span>));</div><div class="line">    CompletableFuture ex = CompletableFuture.supplyAsync(() -&gt; &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"runtime"</span>);</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    System.out.println(<span class="string">"is a done?"</span> +a.isDone()+<span class="string">". Is b done?"</span>+b.isDone()+<span class="string">"."</span>);</div><div class="line">    CompletableFuture future = CompletableFuture.allOf(a,b,ex);</div><div class="line">    System.out.println(<span class="string">"is a done?"</span> +a.isDone()+<span class="string">". Is b done?"</span>+b.isDone()+<span class="string">"."</span>);</div><div class="line">    CompletableFuture exFuture = future.exceptionally( exp -&gt; &#123;</div><div class="line">        <span class="keyword">return</span> ((RuntimeException) exp).getMessage();</div><div class="line">    &#125;);</div><div class="line">    System.out.println(<span class="string">"done?"</span>+future.isDone()+<span class="string">" cancel?"</span>+future.isCancelled()+<span class="string">" exp?"</span>+future.isCompletedExceptionally());</div><div class="line">    System.out.println(<span class="string">"is a done?"</span> +a.isDone()+<span class="string">". Is b done?"</span>+b.isDone()+<span class="string">"."</span>);</div><div class="line">    System.out.println(exFuture.get());</div><div class="line">    System.out.println(<span class="string">"done?"</span>+future.isDone()+<span class="string">" cancel?"</span>+future.isCancelled()+<span class="string">" exp?"</span>+future.isCompletedExceptionally());</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="anyOf方法-1"><a href="#anyOf方法-1" class="headerlink" title="anyOf方法"></a>anyOf方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">base19</span><span class="params">()</span> <span class="keyword">throws</span> ExecutionException, InterruptedException </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * CompletableFuture.anyOf 静态方法,传入多个独立的 future ,并且返回一个新的CompletableFuture</div><div class="line">     * 当任何一个方法完成时,新的 future 完成,并且返回该值</div><div class="line">     * 不能传入空值</div><div class="line">     * 当某个方法出现了异常时,新 future 会立刻完成,并且携带一个异常</div><div class="line">     */</div><div class="line">    CompletableFuture&lt;Integer&gt; a = CompletableFuture.supplyAsync(getRandomInt());</div><div class="line">    CompletableFuture&lt;Integer&gt; b = CompletableFuture.supplyAsync(getRandomInt(<span class="number">3000l</span>));</div><div class="line">    CompletableFuture ex = CompletableFuture.supplyAsync(() -&gt; &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"runtime"</span>);</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    System.out.println(<span class="string">"is a done?"</span> +a.isDone()+<span class="string">". Is b done?"</span>+b.isDone()+<span class="string">"."</span>);</div><div class="line">    CompletableFuture future = CompletableFuture.anyOf(a,b,ex);</div><div class="line">    System.out.println(<span class="string">"is a done?"</span> +a.isDone()+<span class="string">". Is b done?"</span>+b.isDone()+<span class="string">"."</span>);</div><div class="line">    CompletableFuture exFuture = future.exceptionally( exp -&gt; &#123;</div><div class="line">        <span class="keyword">return</span> ((RuntimeException) exp).getMessage();</div><div class="line">    &#125;);</div><div class="line">    System.out.println(<span class="string">"done?"</span>+future.isDone()+<span class="string">" cancel?"</span>+future.isCancelled()+<span class="string">" exp?"</span>+future.isCompletedExceptionally());</div><div class="line">    System.out.println(<span class="string">"is a done?"</span> +a.isDone()+<span class="string">". Is b done?"</span>+b.isDone()+<span class="string">"."</span>);</div><div class="line">    System.out.println(exFuture.get());</div><div class="line">    System.out.println(<span class="string">"done?"</span>+future.isDone()+<span class="string">" cancel?"</span>+future.isCancelled()+<span class="string">" exp?"</span>+future.isCompletedExceptionally());</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="completedFuture-方法-1"><a href="#completedFuture-方法-1" class="headerlink" title="completedFuture 方法"></a>completedFuture 方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">base22</span><span class="params">()</span> <span class="keyword">throws</span> ExecutionException, InterruptedException </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * completedFuture 方法是能够直接将值放入 future 对象,常用于测试</div><div class="line">     * CompletableFuture可以嵌套</div><div class="line">     */</div><div class="line">    CompletableFuture future = CompletableFuture.completedFuture(<span class="number">1</span>);</div><div class="line">    CompletableFuture future1 = CompletableFuture.completedFuture(future);</div><div class="line">    CompletableFuture future2 = CompletableFuture.completedFuture(future1);</div><div class="line">    System.out.println(future2.get());</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<p>这篇解析写到这里,下一次我会简单说明一下有关 java 8 中的几种 lambda</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这几天稍微花时间学习了一下 java 8 提供的处理异步调用的一个 future 类 &lt;code&gt;CompletableFuture&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;这是一个针对函数式的 future 对象.用来让我们更加优雅的使用异步调用.&lt;/p&gt;
&lt;h1 id=&quot;简述&quot;&gt;&lt;a href=&quot;#简述&quot; class=&quot;headerlink&quot; title=&quot;简述&quot;&gt;&lt;/a&gt;简述&lt;/h1&gt;&lt;p&gt;&lt;code&gt;CompletableFuture&lt;/code&gt;是&lt;code&gt;Future&lt;/code&gt;接口的实现类.内部只有两个属性:&lt;code&gt;result&lt;/code&gt;和&lt;code&gt;stack&lt;/code&gt;两个值,分别表示对象所存储的内容以及对象现在的完成状况.&lt;/p&gt;
&lt;p&gt;由于&lt;code&gt;CompletableFuture&lt;/code&gt;也是 future 对象的一部分,所以它也有 future 的相关特性.博主在这里认为它最终要的内容就是他的执行时间,就是:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;CompletableFuture 只在对象创建的时候才开始尝试执行&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="Future" scheme="http://yoursite.com/tags/Future/"/>
    
      <category term="lambda" scheme="http://yoursite.com/tags/lambda/"/>
    
  </entry>
  
  <entry>
    <title>Java异步调用2</title>
    <link href="http://yoursite.com/2017/05/03/Java%E5%BC%82%E6%AD%A5%E8%B0%83%E7%94%A82/"/>
    <id>http://yoursite.com/2017/05/03/Java异步调用2/</id>
    <published>2017-05-03T10:29:32.000Z</published>
    <updated>2017-05-05T13:11:11.000Z</updated>
    
    <content type="html"><![CDATA[<p>在上一节 <a href="/2017/04/26/Java异步调用1/" title="Java异步调用1">Java异步调用1</a> 中 我们提到了在需要使用异步调用的情况下如何使用 <code>FutureTask</code> 工具进行异步调用,并且提示了相关代码</p>
<p>在上面的例子中,我们使用了<code>Callable</code>接口来实现了异步工作.</p>
<p>但是在 Java 8 开始频繁使用的现在,我们经常会觉得这种实现方式比较low.</p>
<p>所以本节提到了在 Java 8 的环境下如何使用 lambda 来实现异步操作.<br><a id="more"></a><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//先建立了一个拥有五个线程的线程池</span></div><div class="line">ExecutorService executorService = Executors.newFixedThreadPool(<span class="number">5</span>);</div><div class="line"><span class="comment">//分别建立了对应的五个异步对象,并且传入 executor</span></div><div class="line">CompletableFuture&lt;JSONObject&gt; generalA = getGeneralFuture(receiver, MessageType.A,executorService);</div><div class="line">CompletableFuture&lt;JSONObject&gt; generalB = getGeneralFuture(receiver, MessageType.B,executorService);</div><div class="line">CompletableFuture&lt;JSONObject&gt; generalC = getGeneralFuture(receiver, MessageType.C,executorService);</div><div class="line">CompletableFuture&lt;JSONObject&gt; generalD = getGeneralFuture(receiver, MessageType.D,executorService);</div><div class="line">CompletableFuture&lt;JSONObject&gt; generalE = getGeneralFuture(receiver, MessageType.E,executorService);</div><div class="line"></div><div class="line"><span class="comment">//获取到五个对应的异步结果,时间取决于最慢的一个异步方法</span></div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">    response.put(<span class="string">"a_result"</span>, generalA.get());</div><div class="line">    response.put(<span class="string">"b_result"</span>, generalB.get());</div><div class="line">    response.put(<span class="string">"c_result"</span>, generalC.get());</div><div class="line">    response.put(<span class="string">"d_result"</span>, generalD.get());</div><div class="line">    response.put(<span class="string">"e_result"</span>, generalE.get());</div><div class="line">    <span class="keyword">return</span> response;</div><div class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">    e.printStackTrace();</div><div class="line">&#125; <span class="keyword">catch</span> (ExecutionException e) &#123;</div><div class="line">    e.printStackTrace();</div><div class="line">&#125; <span class="keyword">finally</span> &#123;</div><div class="line">    <span class="comment">//在所有结束情形下关闭线程池,回收资源</span></div><div class="line">    executorService.shutdown();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>下面是<code>getGeneralFuture</code>的代码,</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//传入一个lambda函数来处理逻辑</span></div><div class="line"><span class="function"><span class="keyword">private</span> CompletableFuture&lt;JSONObject&gt; <span class="title">getGeneralFuture</span><span class="params">(String receiver , MessageType messageType,ExecutorService executorService)</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> CompletableFuture.supplyAsync(() -&gt; &#123;</div><div class="line">        <span class="comment">//Do Something ....</span></div><div class="line">        <span class="keyword">return</span> messageJson;</div><div class="line">    &#125;,executorService);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在 java 8 下使用 lambda 执行异步调用就完成了.</p>
<hr>
<p>关于这个例子暂时到这里,之后我们会继续学习有关<code>CompletableFuture</code>的内容.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在上一节 &lt;a href=&quot;/2017/04/26/Java异步调用1/&quot; title=&quot;Java异步调用1&quot;&gt;Java异步调用1&lt;/a&gt; 中 我们提到了在需要使用异步调用的情况下如何使用 &lt;code&gt;FutureTask&lt;/code&gt; 工具进行异步调用,并且提示了相关代码&lt;/p&gt;
&lt;p&gt;在上面的例子中,我们使用了&lt;code&gt;Callable&lt;/code&gt;接口来实现了异步工作.&lt;/p&gt;
&lt;p&gt;但是在 Java 8 开始频繁使用的现在,我们经常会觉得这种实现方式比较low.&lt;/p&gt;
&lt;p&gt;所以本节提到了在 Java 8 的环境下如何使用 lambda 来实现异步操作.&lt;br&gt;
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="Future" scheme="http://yoursite.com/tags/Future/"/>
    
      <category term="lambda" scheme="http://yoursite.com/tags/lambda/"/>
    
      <category term="异步" scheme="http://yoursite.com/tags/%E5%BC%82%E6%AD%A5/"/>
    
  </entry>
  
  <entry>
    <title>Java异步调用1</title>
    <link href="http://yoursite.com/2017/04/26/Java%E5%BC%82%E6%AD%A5%E8%B0%83%E7%94%A81/"/>
    <id>http://yoursite.com/2017/04/26/Java异步调用1/</id>
    <published>2017-04-26T15:42:25.000Z</published>
    <updated>2017-05-05T13:11:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>在我们对 Scala 的使用过程之中.我们会频繁的用到一类方法,称为<em>异步方法</em>.<br>在 Scala 中也是我们最熟悉的 <code>scala.concurrent.Future</code>.不了解相关内容的可以去看 <code>Future</code> 相关的博客.</p>
<p>通过对 <code>Future</code> 方法的调用,我们可以特别优雅的方式实现异步的调用.也就是类似多线程的使用.<br><a id="more"></a><br>在 Java 中,代码大部分都是同步执行的.简单的来说,就是做一顿饭我先刷锅,再淘米.等米饭做熟了再去洗碗洗菜炒菜盛饭盛菜摆桌吃饭.</p>
<p>有了异步方法,我们就可以做到先刷锅刷碗,在淘米做饭的空闲功夫去洗菜炒菜做饭.大大节省我们的程序的运行效率.</p>
<p><code>FutureTask</code>是<code>Future</code>接口的一个实现类,它是从 Java 1.5 开始引入的.通过它能够控制它的执行方法的行为.其具体的内容是通过 <code>Callable</code>接口来实现的.</p>
<blockquote>
<p><code>FutureTask</code>有7个状态,其中数值从小到大:<br><code>NEW</code> <code>COMPLETING</code> <code>NORMAL</code> <code>EXCEPTIONAL</code> <code>CANCELLED</code> <code>INTERRUPTING</code> <code>INTERRUPTED</code><br>其中,状态有几个可能的流转方式:</p>
<ol>
<li>新建 -&gt; 完成中 -&gt; 普通</li>
<li>新建 -&gt; 完成中 -&gt; 异常</li>
<li>新建 -&gt; 取消</li>
<li>新建 -&gt; 打断中 -&gt; 打断</li>
</ol>
<p><code>FutureTask</code> 有许多方法,包括:</p>
<ul>
<li><code>isCancelled</code> 方法 : 返回是否取消(当状态是后面三种情况时)</li>
<li><code>isDone</code> 方法 : 返回是否处理(当状态不是新建时)</li>
<li><code>cancel</code> 方法 : 试图取消方法(状态可能变成取消或者被打断)</li>
<li><code>get</code> 方法 : 获取到方法的返回值,如果传入了时间并且超时的话会抛出异常</li>
</ul>
</blockquote>
<p><code>FutureTask</code>的构造器传入一个 <code>Callable</code> 对象,它和 <code>Runnable</code> 的主要区别是:</p>
<table>
<thead>
<tr>
<th><code>Callable</code></th>
<th><code>Runnable</code></th>
</tr>
</thead>
<tbody>
<tr>
<td>实现 <code>call</code> 方法</td>
<td>实现 <code>run</code> 方法</td>
</tr>
<tr>
<td>可获得返回结果</td>
<td>不能直接获得结果</td>
</tr>
<tr>
<td>可以抛出异常</td>
<td>不能抛出异常</td>
</tr>
</tbody>
</table>
<p>接下来我们直接看代码实现;</p>
<p>首先我有五个获取对应的信息的方法<code>getGeneral</code>.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//先建立了一个拥有五个线程的线程池</span></div><div class="line">ExecutorService executorService = Executors.newFixedThreadPool(<span class="number">5</span>);</div><div class="line"><span class="comment">//分别建立了对应的五个异步对象</span></div><div class="line">FutureTask&lt;JSONObject&gt; generalA = getGeneral(receiver, MessageType.A);</div><div class="line">FutureTask&lt;JSONObject&gt; generalB = getGeneral(receiver, MessageType.B);</div><div class="line">FutureTask&lt;JSONObject&gt; generalC = getGeneral(receiver, MessageType.C);</div><div class="line">FutureTask&lt;JSONObject&gt; generalD = getGeneral(receiver, MessageType.D);</div><div class="line">FutureTask&lt;JSONObject&gt; generalE = getGeneral(receiver, MessageType.E);</div><div class="line"><span class="comment">//对五个异步对象进行执行</span></div><div class="line">executorService.execute(generalA);</div><div class="line">executorService.execute(generalB);</div><div class="line">executorService.execute(generalC);</div><div class="line">executorService.execute(generalD);</div><div class="line">executorService.execute(generalE);</div><div class="line"><span class="comment">//获取到五个对应的异步结果,时间取决于最慢的一个异步方法</span></div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">    response.put(<span class="string">"a_result"</span>, generalA.get());</div><div class="line">    response.put(<span class="string">"b_result"</span>, generalB.get());</div><div class="line">    response.put(<span class="string">"c_result"</span>, generalC.get());</div><div class="line">    response.put(<span class="string">"d_result"</span>, generalD.get());</div><div class="line">    response.put(<span class="string">"e_result"</span>, generalE.get());</div><div class="line">    <span class="keyword">return</span> response;</div><div class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">    e.printStackTrace();</div><div class="line">&#125; <span class="keyword">catch</span> (ExecutionException e) &#123;</div><div class="line">    e.printStackTrace();</div><div class="line">&#125; <span class="keyword">finally</span> &#123;</div><div class="line">    <span class="comment">//在所有结束情形下关闭线程池,回收资源</span></div><div class="line">    executorService.shutdown();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>下面是<code>getGeneral</code>的代码:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> FutureTask&lt;JSONObject&gt; <span class="title">getGeneral</span><span class="params">(String receiver, MessageType messageType)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> FutureTask&lt;JSONObject&gt;(<span class="keyword">new</span> Callable&lt;JSONObject&gt;() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> JSONObject <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">            <span class="comment">//Do Something ....</span></div><div class="line">            <span class="keyword">return</span> messageJson;</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这样就完成了我们的五组异步调用.</p>
<hr>
<p>异步方面我暂且也学到这里,将来有机会继续更新有关异步的内容.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在我们对 Scala 的使用过程之中.我们会频繁的用到一类方法,称为&lt;em&gt;异步方法&lt;/em&gt;.&lt;br&gt;在 Scala 中也是我们最熟悉的 &lt;code&gt;scala.concurrent.Future&lt;/code&gt;.不了解相关内容的可以去看 &lt;code&gt;Future&lt;/code&gt; 相关的博客.&lt;/p&gt;
&lt;p&gt;通过对 &lt;code&gt;Future&lt;/code&gt; 方法的调用,我们可以特别优雅的方式实现异步的调用.也就是类似多线程的使用.&lt;br&gt;
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="Future" scheme="http://yoursite.com/tags/Future/"/>
    
      <category term="异步" scheme="http://yoursite.com/tags/%E5%BC%82%E6%AD%A5/"/>
    
  </entry>
  
  <entry>
    <title>当 Java 遇到 Scala 中的 Seq 对象</title>
    <link href="http://yoursite.com/2017/04/25/%E5%BD%93-java-%E4%B8%AD%E9%81%87%E5%88%B0-scala-%E4%B8%AD%E7%9A%84-Seq-%E5%AF%B9%E8%B1%A1/"/>
    <id>http://yoursite.com/2017/04/25/当-java-中遇到-scala-中的-Seq-对象/</id>
    <published>2017-04-25T15:31:46.000Z</published>
    <updated>2017-05-05T13:10:58.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天在工作中遇到了一个很有意思的情况.<br>我们都知道 java 和 scala 代码由于是基于同一套 jvm 环境上运行的语言.所以在代码中是可以互相调用的.所以今天在调用同事写的代码的时候遇到了一个很有趣的问题.<br><a id="more"></a><br>首先,他传给了我一个 scala 的 case class 对象:<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderEvent</span>(<span class="params">products: <span class="type">Seq</span>[<span class="type">ProductInfo</span>]</span>)</span></div></pre></td></tr></table></figure></p>
<p>这个订单对象里有对应的产品列表.<br>于是有意思的事情出现了.当我获取到了对应的产品列表之后:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">event.products()</div><div class="line"><span class="comment">//返回类型:scala.collection.Seq&lt;ProductInfo&gt;</span></div></pre></td></tr></table></figure></p>
<p>这个时候我在获得到的对象中获取对应的方法能够获取非常多的方法.包括<code>Seq</code> 中非常常见的 <code>map</code>,<code>flatMap</code>,<code>forEach</code>,<code>filter</code>等方法.但是,事实证明,这不太好用.虽然 java8 中已经支持了函数式编程.但是显然还不能够支持 scala 中的集合方法.</p>
<p>所以我又把目标转到了转换类型方法中去.<br>于是我又发现了<code>toList</code>方法,但是很遗憾的是.我获得到了 scala 中的 <code>List</code>, 仍然不能正常的使用.从 java 中找到 scala 中的 <code>as[]</code> 方法以及<code>toJava</code> 方法显然也有些异想天开.</p>
<p>最后我只能从方法中找到了一个<code>iterator</code>方法,他可以获得一个<code>Iterator</code>对象.当然…这个对象也是 scala 中的.不过它同时具有的 <code>hasNext</code> 方法以及 <code>next</code> 方法为我提供了一个while循环的可能性.</p>
<hr>
<p>这个问题目前没有结束,日后我会继续对这个问题进行研究.期待下一篇能够解决此问题</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天在工作中遇到了一个很有意思的情况.&lt;br&gt;我们都知道 java 和 scala 代码由于是基于同一套 jvm 环境上运行的语言.所以在代码中是可以互相调用的.所以今天在调用同事写的代码的时候遇到了一个很有趣的问题.&lt;br&gt;
    
    </summary>
    
      <category term="Java_Scala" scheme="http://yoursite.com/categories/Java-Scala/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="Scala" scheme="http://yoursite.com/tags/Scala/"/>
    
      <category term="Seq" scheme="http://yoursite.com/tags/Seq/"/>
    
  </entry>
  
  <entry>
    <title>货币金额计算</title>
    <link href="http://yoursite.com/2017/04/25/%E8%B4%A7%E5%B8%81%E9%87%91%E9%A2%9D%E8%AE%A1%E7%AE%97/"/>
    <id>http://yoursite.com/2017/04/25/货币金额计算/</id>
    <published>2017-04-25T15:06:04.000Z</published>
    <updated>2017-05-05T13:11:02.000Z</updated>
    
    <content type="html"><![CDATA[<p>商业用途之中,我们经常出现对于数字的金额的处理.</p>
<p>比如金额<em>一万三千元零两块四毛</em>,数字写作<code>13000.24</code>, 但是在显示的处理以及在会计的计算中,经常会使用会计写法<code>13,000.24</code>.所以有些时候我们需要将数字直接转换为此类表示形式<br><a id="more"></a><br>所以今天涉及到了<code>java.text.NumberFormat</code>类.<br>举个栗子:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">BigDecimal money = <span class="keyword">new</span> BigDecimal(<span class="string">"1021380124.127"</span>);</div><div class="line">NumberFormat format = NumberFormat.getCurrencyInstance();</div><div class="line">System.out.println(format.format(money));   <span class="comment">//￥1,021,380,124.127</span></div></pre></td></tr></table></figure></p>
<p>针对<code>getCurrencyInstance</code>方法, format 方法能够将传入的数字转换成金额格式,并且转换成金额的显示方式并在前面加上人民币标识符.</p>
<p>当然我们还有最常规的模式:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">BigDecimal money = <span class="keyword">new</span> BigDecimal(<span class="string">"1021380124.127"</span>);</div><div class="line">NumberFormat format = NumberFormat.getNumberInstance();</div><div class="line">System.out.println(format.format(money));   <span class="comment">//1,021,380,124.127</span></div></pre></td></tr></table></figure></p>
<p><code>getNumberInstance</code>方法会对数字进行正常的格式划分;<br>而<code>getIntegerInstance</code>方法会对数字进行整数的四舍五入:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">BigDecimal money = <span class="keyword">new</span> BigDecimal(<span class="string">"1021380124.127"</span>);</div><div class="line">NumberFormat format = NumberFormat.getIntegerInstance();</div><div class="line">System.out.println(format.format(money));   <span class="comment">//1,021,380,124</span></div></pre></td></tr></table></figure></p>
<p>除了这些<code>format</code> 方法允许传入多种类型的参数,比如整形, double,long, 以及一些 object 类型.比如 BigDecimal.<br>但是无法处理字符串类型,如果传入字符串类型就会抛出异常<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">java.lang.IllegalArgumentException: Cannot format given Object as a Number</div></pre></td></tr></table></figure></p>
<hr>
<p>针对此方法之后还会进一步的学习,届时将会进一步更新此目录</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;商业用途之中,我们经常出现对于数字的金额的处理.&lt;/p&gt;
&lt;p&gt;比如金额&lt;em&gt;一万三千元零两块四毛&lt;/em&gt;,数字写作&lt;code&gt;13000.24&lt;/code&gt;, 但是在显示的处理以及在会计的计算中,经常会使用会计写法&lt;code&gt;13,000.24&lt;/code&gt;.所以有些时候我们需要将数字直接转换为此类表示形式&lt;br&gt;
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="金额" scheme="http://yoursite.com/tags/%E9%87%91%E9%A2%9D/"/>
    
      <category term="BigDecimal" scheme="http://yoursite.com/tags/BigDecimal/"/>
    
  </entry>
  
</feed>
